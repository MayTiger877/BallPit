name: Build VST3 Plugin

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release
  JUCE_VERSION: 8.0.7

jobs:
  build:
    name: Build on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows
            os: windows-latest
            artifact_name: "Ball-Pit-Windows"
            build_path: "Builds/VisualStudio2022"
            vst3_path: "Builds/VisualStudio2022/x64/Release/VST3/Ball Pit.vst3"
          - name: Linux
            os: ubuntu-latest
            artifact_name: "Ball-Pit-Linux"
            build_path: "Builds/LinuxMakefile"
            vst3_path: "Builds/LinuxMakefile/build/Ball_Pit_artefacts/Release/VST3/Ball Pit.vst3"
          - name: macOS
            os: macos-latest
            artifact_name: "Ball-Pit-macOS"
            build_path: "Builds/MacOSX"
            vst3_path: "Builds/MacOSX/build/Release/Ball Pit.vst3"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          libjack-jackd2-dev \
          ladspa-sdk \
          libcurl4-openssl-dev \
          libfreetype6-dev \
          libx11-dev \
          libxcomposite-dev \
          libxcursor-dev \
          libxext-dev \
          libxinerama-dev \
          libxrandr-dev \
          libxrender-dev \
          libwebkit2gtk-4.0-dev \
          libglu1-mesa-dev \
          mesa-common-dev

    - name: Setup MSVC (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    - name: Download and setup JUCE
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          curl -L -o juce.zip https://github.com/juce-framework/JUCE/releases/download/${{ env.JUCE_VERSION }}/juce-${{ env.JUCE_VERSION }}-windows.zip
        elif [ "$RUNNER_OS" == "Linux" ]; then
          curl -L -o juce.zip https://github.com/juce-framework/JUCE/releases/download/${{ env.JUCE_VERSION }}/juce-${{ env.JUCE_VERSION }}-linux.zip
        elif [ "$RUNNER_OS" == "macOS" ]; then
          curl -L -o juce.zip https://github.com/juce-framework/JUCE/releases/download/${{ env.JUCE_VERSION }}/juce-${{ env.JUCE_VERSION }}-osx.zip
        fi
        
        unzip juce.zip
        mv JUCE* JUCE

    - name: Build Projucer (Windows)
      if: runner.os == 'Windows'
      run: |
        cd JUCE/extras/Projucer/Builds/VisualStudio2022
        msbuild Projucer.sln -p:Configuration=Release -p:Platform=x64

    - name: Build Projucer (Linux)
      if: runner.os == 'Linux'
      run: |
        cd JUCE/extras/Projucer/Builds/LinuxMakefile
        make CONFIG=Release -j$(nproc)

    - name: Build Projucer (macOS)
      if: runner.os == 'macOS'
      run: |
        cd JUCE/extras/Projucer/Builds/MacOSX
        xcodebuild -configuration Release -jobs $(sysctl -n hw.ncpu)

    - name: Add platform exports and regenerate project (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        # The project already has VS2022 export, just regenerate
        ./JUCE/extras/Projucer/Builds/VisualStudio2022/x64/Release/App/Projucer.exe --resave "Ball Pit.jucer"

    - name: Add platform exports and regenerate project (Linux)
      if: runner.os == 'Linux'
      run: |
        # Add Linux export if it doesn't exist, then regenerate
        python3 << 'EOF'
        import xml.etree.ElementTree as ET
        
        tree = ET.parse('Ball Pit.jucer')
        root = tree.getroot()
        exportformats = root.find('EXPORTFORMATS')
        
        if exportformats.find('LINUX_MAKE') is None:
            linux_make = ET.SubElement(exportformats, 'LINUX_MAKE')
            linux_make.set('targetFolder', 'Builds/LinuxMakefile')
            
            configs = ET.SubElement(linux_make, 'CONFIGURATIONS')
            
            for config_name, is_debug in [('Debug', '1'), ('Release', '0')]:
                config = ET.SubElement(configs, 'CONFIGURATION')
                config.set('isDebug', is_debug)
                config.set('name', config_name)
                config.set('targetName', 'Ball Pit')
            
            modulepaths = ET.SubElement(linux_make, 'MODULEPATHS')
            modules = [
                'juce_audio_basics', 'juce_audio_devices', 'juce_audio_plugin_client',
                'juce_audio_processors', 'juce_audio_utils', 'juce_core',
                'juce_data_structures', 'juce_events', 'juce_gui_basics',
                'juce_midi_ci', 'juce_gui_extra', 'juce_graphics', 'juce_audio_formats'
            ]
            
            for module in modules:
                modulepath = ET.SubElement(modulepaths, 'MODULEPATH')
                modulepath.set('id', module)
                modulepath.set('path', '../JUCE/modules')
            
            tree.write('Ball Pit.jucer', encoding='UTF-8', xml_declaration=True)
        EOF
        
        ./JUCE/extras/Projucer/Builds/LinuxMakefile/build/Projucer --resave "Ball Pit.jucer"

    - name: Add platform exports and regenerate project (macOS)
      if: runner.os == 'macOS'
      run: |
        # Add macOS export if it doesn't exist, then regenerate
        python3 << 'EOF'
        import xml.etree.ElementTree as ET
        
        tree = ET.parse('Ball Pit.jucer')
        root = tree.getroot()
        exportformats = root.find('EXPORTFORMATS')
        
        if exportformats.find('XCODE_MAC') is None:
            xcode_mac = ET.SubElement(exportformats, 'XCODE_MAC')
            xcode_mac.set('targetFolder', 'Builds/MacOSX')
            
            configs = ET.SubElement(xcode_mac, 'CONFIGURATIONS')
            
            for config_name, is_debug in [('Debug', '1'), ('Release', '0')]:
                config = ET.SubElement(configs, 'CONFIGURATION')
                config.set('isDebug', is_debug)
                config.set('name', config_name)
                config.set('targetName', 'Ball Pit')
            
            modulepaths = ET.SubElement(xcode_mac, 'MODULEPATHS')
            modules = [
                'juce_audio_basics', 'juce_audio_devices', 'juce_audio_plugin_client',
                'juce_audio_processors', 'juce_audio_utils', 'juce_core',
                'juce_data_structures', 'juce_events', 'juce_gui_basics',
                'juce_midi_ci', 'juce_gui_extra', 'juce_graphics', 'juce_audio_formats'
            ]
            
            for module in modules:
                modulepath = ET.SubElement(modulepaths, 'MODULEPATH')
                modulepath.set('id', module)
                modulepath.set('path', '../JUCE/modules')
            
            tree.write('Ball Pit.jucer', encoding='UTF-8', xml_declaration=True)
        EOF
        
        ./JUCE/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer --resave "Ball Pit.jucer"

    - name: Build VST3 (Windows)
      if: runner.os == 'Windows'
      run: |
        cd "${{ matrix.build_path }}"
        msbuild "Ball Pit.sln" -p:Configuration=Release -p:Platform=x64

    - name: Build VST3 (Linux)
      if: runner.os == 'Linux'
      run: |
        cd "${{ matrix.build_path }}"
        make CONFIG=Release -j$(nproc)

    - name: Build VST3 (macOS)
      if: runner.os == 'macOS'
      run: |
        cd "${{ matrix.build_path }}"
        xcodebuild -configuration Release -jobs $(sysctl -n hw.ncpu)

    - name: Create artifacts
      run: |
        mkdir -p artifacts
        if [ -d "${{ matrix.vst3_path }}" ]; then
          cp -r "${{ matrix.vst3_path }}" artifacts/
        elif [ -f "${{ matrix.vst3_path }}" ]; then
          cp "${{ matrix.vst3_path }}" artifacts/
        else
          echo "VST3 not found at expected path: ${{ matrix.vst3_path }}"
          find . -name "*.vst3" -type d 2>/dev/null || find . -name "*.vst3" -type f 2>/dev/null || true
          exit 1
        fi
      shell: bash

    - name: Package artifacts
      run: |
        cd artifacts
        if [ "$RUNNER_OS" == "Windows" ]; then
          7z a "${{ matrix.artifact_name }}.zip" "Ball Pit.vst3"
        else
          zip -r "${{ matrix.artifact_name }}.zip" "Ball Pit.vst3"
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts/
        retention-days: 30

    - name: Upload to release (if release)
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/${{ matrix.artifact_name }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
